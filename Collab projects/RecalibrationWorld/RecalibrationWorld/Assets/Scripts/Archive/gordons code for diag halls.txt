 /*case 4:
                                    //Rotate wall based on base station locations
                                    opp = Mathf.Abs(sensors[1].transform.localPosition.z - sensors[0].transform.localPosition.z);
                                    hyp = new Vector2(sensors[1].transform.localPosition.x - sensors[0].transform.localPosition.x, sensors[1].transform.localPosition.z - sensors[0].transform.localPosition.z).magnitude;
                                    angle =  Mathf.Asin((opp / hyp));

                                    walls[4].transform.localRotation = Quaternion.AngleAxis(angle * Mathf.Rad2Deg, Vector3.up);

                                    //Scale wall based on base station locations 
                                    walls[4].transform.localScale = new Vector3(new Vector2(sensors[1].transform.position.x - sensors[0].transform.position.x, sensors[1].transform.position.z - sensors[0].transform.position.z).magnitude, walls[4].transform.localScale.y, wallThickness);

                                    //Center the angled wall
                                    walls[4].transform.position = new Vector3(Mathf.Abs((sensors[0].transform.position.x - sensors[1].transform.position.x) / 2) + Mathf.Min(sensors[0].transform.position.x, sensors[1].transform.position.x), walls[4].transform.position.y, Mathf.Abs(sensors[1].transform.position.z - sensors[0].transform.position.z) / 2 + Mathf.Min(sensors[0].transform.position.z, sensors[1].transform.position.z));

                                    //Offset wall from center to allow hallway
                                    walls[index].transform.position += walls[index].transform.forward * hallwayHalfWidth;
                                    break;
                                case 5:
                                    //Rotate wall based on base station locations
                                    opp = Mathf.Abs(sensors[1].transform.localPosition.z - sensors[0].transform.localPosition.z);
                                    hyp = new Vector2(sensors[1].transform.localPosition.x - sensors[0].transform.localPosition.x, sensors[1].transform.localPosition.z - sensors[0].transform.localPosition.z).magnitude;
                                    angle = Mathf.Asin((opp / hyp));
                                    walls[index].transform.localRotation = Quaternion.AngleAxis(angle * Mathf.Rad2Deg, Vector3.up);

                                    //Scale wall based on base station locations 
                                    walls[index].transform.localScale = new Vector3(new Vector2(sensors[1].transform.position.x - sensors[0].transform.position.x, sensors[1].transform.position.z - sensors[0].transform.position.z).magnitude, walls[index].transform.localScale.y, wallThickness);

                                    //Center the angled wall
                                    walls[index].transform.position = new Vector3(Mathf.Abs((sensors[0].transform.position.x - sensors[1].transform.position.x) / 2) + Mathf.Min(sensors[0].transform.position.x, sensors[1].transform.position.x), walls[index].transform.position.y, Mathf.Abs(sensors[1].transform.position.z - sensors[0].transform.position.z) / 2 + Mathf.Min(sensors[0].transform.position.z, sensors[1].transform.position.z));

                                    //Offset wall from center to allow hallway
                                    walls[index].transform.position -= walls[index].transform.forward * hallwayHalfWidth;


                                    break;
                                case 6:
                                    //Rotate wall based on base station locations
                                    opp = Mathf.Abs(sensors[1].transform.localPosition.z - sensors[0].transform.localPosition.z);
                                    hyp = new Vector2(sensors[1].transform.localPosition.x - sensors[0].transform.localPosition.x, sensors[1].transform.localPosition.z - sensors[0].transform.localPosition.z).magnitude;
                                    angle = Mathf.Asin((opp / hyp));

                                    //walls[index].transform.rotation.SetLookRotation(sensors[1].transform.position - sensors[0].transform.position);


                                    walls[index].transform.rotation = Quaternion.AngleAxis((angle)* Mathf.Rad2Deg, Vector3.up);

                                    walls[index].transform.rotation = Quaternion.Euler(walls[index].transform.rotation.eulerAngles.x, walls[index].transform.rotation.eulerAngles.y + 90f, walls[index].transform.rotation.eulerAngles.z);


                                    //Scale wall based on base station locations 
                                    walls[index].transform.localScale = new Vector3(2*hallwayHalfWidth, walls[index].transform.localScale.y, wallThickness);

                                    //Center the end wall at the end of the hallway
                                    walls[index].transform.position = new Vector3(sensors[0].transform.position.x, walls[index].transform.position.y, sensors[0].transform.position.z);

                                    //Offset wall from sensor to end
                                    walls[index].transform.position +=  walls[index].transform.forward * Mathf.Max(Mathf.Abs(Mathf.Tan(angle+Mathf.PI/2)), Mathf.Abs(Mathf.Tan(angle))) * hallwayHalfWidth;
                                    break;

                                case 7:
                                    //Rotate wall based on base station locations
                                    opp = Mathf.Abs(sensors[1].transform.localPosition.z - sensors[0].transform.localPosition.z);
                                    hyp = new Vector2(sensors[1].transform.localPosition.x - sensors[0].transform.localPosition.x, sensors[1].transform.localPosition.z - sensors[0].transform.localPosition.z).magnitude;
                                    angle = Mathf.Asin((opp / hyp));
                                    walls[index].transform.rotation = Quaternion.AngleAxis((angle) * Mathf.Rad2Deg, Vector3.up);

                                    walls[index].transform.rotation = Quaternion.Euler(walls[index].transform.rotation.eulerAngles.x, walls[index].transform.rotation.eulerAngles.y + 90f, walls[index].transform.rotation.eulerAngles.z);


                                    //Scale wall based on base station locations 
                                    walls[index].transform.localScale = new Vector3(2 * hallwayHalfWidth, walls[index].transform.localScale.y, wallThickness);

                                    //Center the end wall at the end of the hallway
                                    walls[index].transform.position = new Vector3(sensors[1].transform.position.x, walls[index].transform.position.y, sensors[1].transform.position.z);

                                    //Offset wall from sensor to end
                                    walls[index].transform.position += walls[index].transform.forward * Mathf.Max(Mathf.Abs(Mathf.Tan(angle + Mathf.PI / 2)), Mathf.Abs(Mathf.Tan(angle))) * hallwayHalfWidth;
                                    break;*/